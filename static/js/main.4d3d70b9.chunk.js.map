{"version":3,"sources":["pages/Home/Default/img.svg","pages/Home/First/img.svg","pages/Blog/index.jsx","pages/Home/Default/index.jsx","pages/Home/First/index.jsx","pages/Home/Two/index.jsx","pages/Home/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Blog","Default","className","src","img","alt","First","Two","Home","useState","section","setSection","onClick","e","middle","window","innerWidth","position","clientX","view","App","path","exact","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4GAAAA,EAAOC,QAAU,IAA0B,iC,mBCA3CD,EAAOC,QAAU,IAA0B,iC,2NCM5BC,EAJF,WACX,OAAO,+D,iCCUMC,G,MATC,WACd,OACE,6BACE,yBAAKC,UAAU,MAAMC,IAAKC,IAAKC,IAAI,YACnC,+C,iBCKSC,G,MATD,WACZ,OACE,6BACE,qCACA,yBAAKJ,UAAU,MAAMC,IAAKC,IAAKC,IAAI,eCF1BE,EAJH,WACV,OAAO,8CCwCMC,EArCF,WAAO,IAAD,EACaC,mBAAS,GADtB,mBACVC,EADU,KACDC,EADC,KA4BjB,OACE,oCACE,yBAAKT,UAAU,MAAMU,QA3BL,SAACC,GACnB,IACMC,EADaC,OAAOC,WACE,EACtBC,EAAWJ,EAAEK,QAEfJ,EAASG,EACK,IAAZP,GACFC,EAAWD,EAAU,GAEdI,EAASG,GAClBN,EAAWD,EAAU,KAkBnB,yBAAKR,UAAU,cAdR,SAACQ,GACZ,OAAQA,GACN,KAAK,EACH,OAAO,kBAAC,EAAD,MACT,KAAK,EACH,OAAO,kBAAC,EAAD,MACT,QACE,OAAO,kBAAC,EAAD,OAOsBS,CAAKT,OCrB3BU,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,UAAWf,IACjC,kBAAC,IAAD,CAAOa,KAAK,QAAQC,OAAK,EAACC,UAAWvB,OCEzBwB,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4d3d70b9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/img.aab5cca7.svg\";","module.exports = __webpack_public_path__ + \"static/media/img.8f56d78a.svg\";","import React from \"react\";\n\nconst Blog = () => {\n  return <p>Coming Soon, Under Construction</p>;\n};\n\nexport default Blog;\n","import img from \"./img.svg\";\nimport React from \"react\";\nimport \"./style.css\";\n\nconst Default = () => {\n  return (\n    <div>\n      <img className=\"img\" src={img} alt=\"default\" />\n      <h2>Default Page</h2>\n    </div>\n  );\n};\n\nexport default Default;\n","import React from \"react\";\nimport img from \"./img.svg\";\nimport \"./style.css\";\n\nconst First = () => {\n  return (\n    <div>\n      <h1>Hello</h1>\n      <img className=\"img\" src={img} alt=\"default\" />\n    </div>\n  );\n};\n\nexport default First;\n","import React from \"react\";\n\nconst Two = () => {\n  return <h1>Halaman Kedua</h1>;\n};\n\nexport default Two;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport Default from \"./Default\";\nimport First from \"./First\";\nimport Two from \"./Two\";\n\nconst Home = () => {\n  const [section, setSection] = useState(1);\n\n  const handleClick = (e) => {\n    const windowSize = window.innerWidth;\n    const middle = windowSize / 2;\n    const position = e.clientX;\n\n    if (middle > position) {\n      if (section !== 1) {\n        setSection(section - 1);\n      }\n    } else if (middle < position) {\n      setSection(section + 1);\n    }\n  };\n\n  const view = (section) => {\n    switch (section) {\n      case 1:\n        return <First />;\n      case 2:\n        return <Two />;\n      default:\n        return <Default />;\n    }\n  };\n\n  return (\n    <>\n      <div className=\"App\" onClick={handleClick}>\n        <div className=\"App-header\">{view(section)}</div>\n      </div>\n    </>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\nimport { HashRouter, Route, Switch } from \"react-router-dom\";\nimport Blog from \"./pages/Blog\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <Switch>\n        <Route path=\"/\" exact component={Home} />\n        <Route path=\"/blog\" exact component={Blog} />\n      </Switch>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}